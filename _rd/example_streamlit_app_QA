## app.py

from typing import List
from indexing.semantic_search import fetch_document_details
from rag.document_retriever import retrieve_documents
from rag.answer_generator import generate_answer

def process_query(query: str) -> str:
    """
    Processes a query against the document base and generates a response.
    
    :param query: The user's query as a string.
    :return: A string containing the generated answer.
    """
    # Retrieve relevant documents based on the query
    document_ids = retrieve_documents(query, top_k=5)  # Assume this function returns a list of document IDs
    
    # Fetch document details for the retrieved document IDs
    documents = [fetch_document_details(doc_id) for doc_id in document_ids]
    
    # Generate an answer based on the retrieved documents
    answer = generate_answer(documents, query)
    
    return answer


### end

## PDF_reader.py

import PyPDF2
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import HuggingFaceBgeEmbeddings
from langchain.vectorstores import FAISS

def read_pdf(uploaded_file):
    pdf_reader = PyPDF2.PdfReader(uploaded_file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

def Chunks(docs):
    text_splitter = RecursiveCharacterTextSplitter(
    # Set a really small chunk size, just to show.
    chunk_size = 1000,
    chunk_overlap  = 100,
)
    doc = text_splitter.split_text(docs)
    return doc


def PDF_4_QA(file):
    content = read_pdf(file)
    pdf_chunks = Chunks(docs=content)

    embeddings = HuggingFaceBgeEmbeddings(model_name='sentence-transformers/all-MiniLM-L6-v2',
                                          model_kwargs={'device': 'cpu'})
    vectorstore_openai = FAISS.from_texts(pdf_chunks, embeddings)

    return vectorstore_openai

###  end

### QnA_bot

import streamlit as st
from QnA import Q_A
import re,time


def QA_Bot(vectorstore):
    st.title("Q&A Bot")
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat messages from history on app rerun
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # React to user input
    if prompt := st.chat_input("What is up?"):
        # Display user message in chat message container
        st.chat_message("user").markdown(prompt)
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})

        ai_response = Q_A(vectorstore,prompt)
        response = f"Echo: {ai_response}"
        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            for chunk in re.split(r'(\s+)', response):
                full_response += chunk + " "
                time.sleep(0.01)

                # Add a blinking cursor to simulate typing
                message_placeholder.markdown(full_response + "â–Œ")
        # Add assistant response to chat history
        st.session_state.messages.append({"role": "assistant", "content": full_response})

### QnA.py
        
        from langchain.chains import RetrievalQA
#from Api_Key import google_plam
from langchain.llms import GooglePalm
import os
from dotenv import load_dotenv
load_dotenv()
os.getenv("GOOGLE_API_KEY")
google_plam = os.getenv("GOOGLE_API_KEY")


def Q_A(vectorstore,question):
    google_llm = GooglePalm(google_api_key=google_plam, temperature=0.5)
    qa = RetrievalQA.from_chain_type(llm=google_llm, chain_type="stuff", retriever=vectorstore.as_retriever())
    answer = qa.run(question)

    return answer

### end